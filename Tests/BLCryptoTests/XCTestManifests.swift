#if !canImport(ObjectiveC)
import XCTest

extension AES256Tests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AES256Tests = [
        ("testCBC_encryptDecrypt__shouldDoFullLoop", testCBC_encryptDecrypt__shouldDoFullLoop),
        ("testGCM_encryptDecrypt__shouldDoFullLoop", testGCM_encryptDecrypt__shouldDoFullLoop),
        ("testSimpleMath", testSimpleMath),
    ]
}

extension BLCryptoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BLCryptoTests = [
        ("testContract_decrypt_cbcPKCS1__decryptedMessageShouldMatchSlogan", testContract_decrypt_cbcPKCS1__decryptedMessageShouldMatchSlogan),
        ("testContract_decrypt_gcmOAEP__decryptedMessageShouldMatchSlogan", testContract_decrypt_gcmOAEP__decryptedMessageShouldMatchSlogan),
        ("testDecrypt_cbcPKCS1__shouldDecrypt", testDecrypt_cbcPKCS1__shouldDecrypt),
        ("testDecrypt_gcmOAEP__shouldDecrypt", testDecrypt_gcmOAEP__shouldDecrypt),
        ("testDecrypt_gcmOAEP_cbc__shouldThrowPublicErrorForCorrectedGCMblockType", testDecrypt_gcmOAEP_cbc__shouldThrowPublicErrorForCorrectedGCMblockType),
        ("testDecrypt_gcmOAEP_cbcPKCS1Version__shouldThrowPublicErrorForCorrectVersionTypeGcmOAEP", testDecrypt_gcmOAEP_cbcPKCS1Version__shouldThrowPublicErrorForCorrectVersionTypeGcmOAEP),
        ("testDecrypt_gcmOAEP_pkcs1RSAPadding__shouldThrowPublicErrorForCorrectPaddingTypeOaep", testDecrypt_gcmOAEP_pkcs1RSAPadding__shouldThrowPublicErrorForCorrectPaddingTypeOaep),
        ("testEncrypt__shouldHaveProperlyBase64EncodedCipherAuth", testEncrypt__shouldHaveProperlyBase64EncodedCipherAuth),
        ("testEncryptDecrypt__shouldDoWholeLoop", testEncryptDecrypt__shouldDoWholeLoop),
    ]
}

extension ClearMessageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClearMessageTests = [
        ("test_base64String", test_base64String),
        ("test_initWithBase64String", test_initWithBase64String),
        ("test_initWithData", test_initWithData),
        ("test_initWithString", test_initWithString),
        ("test_string", test_string),
    ]
}

extension EncryptedMessageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EncryptedMessageTests = [
        ("test_base64Encoded", test_base64Encoded),
        ("test_initWithBase64String", test_initWithBase64String),
        ("test_initWithData", test_initWithData),
    ]
}

extension PrivateKeyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrivateKeyTests = [
        ("test_base64String", test_base64String),
        ("test_data", test_data),
        ("test_generateKeyPair", test_generateKeyPair),
        ("test_headerAndOctetString", test_headerAndOctetString),
        ("test_initWithDERName", test_initWithDERName),
        ("test_initWithPEMName", test_initWithPEMName),
        ("test_initWithPEMString", test_initWithPEMString),
        ("test_initWithPEMStringHeaderless", test_initWithPEMStringHeaderless),
        ("test_initWithReference_failsWithPublicKey", test_initWithReference_failsWithPublicKey),
        ("test_initWithReference", test_initWithReference),
        ("test_pemString", test_pemString),
    ]
}

extension PublicKeyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PublicKeyTests = [
        ("test_base64String", test_base64String),
        ("test_data", test_data),
        ("test_initWithBase64String", test_initWithBase64String),
        ("test_initWithBase64StringWhichContainsNewLines", test_initWithBase64StringWhichContainsNewLines),
        ("test_initWithData", test_initWithData),
        ("test_initWithDERName", test_initWithDERName),
        ("test_initWithPEMName", test_initWithPEMName),
        ("test_initWithPEMString", test_initWithPEMString),
        ("test_initWithPEMStringHeaderless", test_initWithPEMStringHeaderless),
        ("test_initWithReference_failsWithPrivateKey", test_initWithReference_failsWithPrivateKey),
        ("test_initWithReference", test_initWithReference),
        ("test_pemString", test_pemString),
        ("test_publicKeysFromComplexPEMFileWorksCorrectly", test_publicKeysFromComplexPEMFileWorksCorrectly),
        ("test_publicKeysFromEmptyPEMFileReturnsEmptyArray", test_publicKeysFromEmptyPEMFileReturnsEmptyArray),
        ("test_publicKeysFromPrivateKeyPEMFileReturnsEmptyArray", test_publicKeysFromPrivateKeyPEMFileReturnsEmptyArray),
    ]
}

extension RSATests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RSATests = [
        ("test_keyData", test_keyData),
        ("test_keyReferences", test_keyReferences),
        ("test_longString", test_longString),
        ("test_OAEP", test_OAEP),
        ("test_randomBytes", test_randomBytes),
        ("test_simple", test_simple),
    ]
}

extension SignatureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SignatureTests = [
        ("test_allDigestTypes", test_allDigestTypes),
        ("test_base64String", test_base64String),
        ("test_initWithBase64String", test_initWithBase64String),
        ("test_initWithData", test_initWithData),
    ]
}

extension X509CertificateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__X509CertificateTests = [
        ("testEncryptionDecryptionLong", testEncryptionDecryptionLong),
        ("testEncryptionDecryptionRandomBytes", testEncryptionDecryptionRandomBytes),
        ("testEncryptionDecryptionSimple", testEncryptionDecryptionSimple),
        ("testHeaderlessKeyVerificationFunc", testHeaderlessKeyVerificationFunc),
        ("testStripX509HeaderPrivateKey", testStripX509HeaderPrivateKey),
        ("testX509CertificateValidityPrivateKey", testX509CertificateValidityPrivateKey),
        ("testX509HeaderVerificationPublicKey", testX509HeaderVerificationPublicKey),
        ("testX509KeyHeader", testX509KeyHeader),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AES256Tests.__allTests__AES256Tests),
        testCase(BLCryptoTests.__allTests__BLCryptoTests),
        testCase(ClearMessageTests.__allTests__ClearMessageTests),
        testCase(EncryptedMessageTests.__allTests__EncryptedMessageTests),
        testCase(PrivateKeyTests.__allTests__PrivateKeyTests),
        testCase(PublicKeyTests.__allTests__PublicKeyTests),
        testCase(RSATests.__allTests__RSATests),
        testCase(SignatureTests.__allTests__SignatureTests),
        testCase(X509CertificateTests.__allTests__X509CertificateTests),
    ]
}
#endif
